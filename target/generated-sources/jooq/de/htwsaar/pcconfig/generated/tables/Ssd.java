/*
 * This file is generated by jOOQ.
 */
package de.htwsaar.pcconfig.generated.tables;


import de.htwsaar.pcconfig.generated.DefaultSchema;
import de.htwsaar.pcconfig.generated.Keys;
import de.htwsaar.pcconfig.generated.tables.records.SsdRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Ssd extends TableImpl<SsdRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>SSD</code>
     */
    public static final Ssd SSD = new Ssd();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SsdRecord> getRecordType() {
        return SsdRecord.class;
    }

    /**
     * The column <code>SSD.SSD_ID</code>.
     */
    public final TableField<SsdRecord, Integer> SSD_ID = createField(DSL.name("SSD_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>SSD.Name</code>.
     */
    public final TableField<SsdRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>SSD.Brand</code>.
     */
    public final TableField<SsdRecord, String> BRAND = createField(DSL.name("Brand"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>SSD.Size</code>.
     */
    public final TableField<SsdRecord, Integer> SIZE = createField(DSL.name("Size"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>SSD.Price</code>.
     */
    public final TableField<SsdRecord, Float> PRICE = createField(DSL.name("Price"), SQLDataType.REAL.nullable(false), this, "");

    private Ssd(Name alias, Table<SsdRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Ssd(Name alias, Table<SsdRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>SSD</code> table reference
     */
    public Ssd(String alias) {
        this(DSL.name(alias), SSD);
    }

    /**
     * Create an aliased <code>SSD</code> table reference
     */
    public Ssd(Name alias) {
        this(alias, SSD);
    }

    /**
     * Create a <code>SSD</code> table reference
     */
    public Ssd() {
        this(DSL.name("SSD"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SsdRecord> getPrimaryKey() {
        return Keys.SSD__PK_SSD;
    }

    @Override
    public Ssd as(String alias) {
        return new Ssd(DSL.name(alias), this);
    }

    @Override
    public Ssd as(Name alias) {
        return new Ssd(alias, this);
    }

    @Override
    public Ssd as(Table<?> alias) {
        return new Ssd(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ssd rename(String name) {
        return new Ssd(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ssd rename(Name name) {
        return new Ssd(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ssd rename(Table<?> name) {
        return new Ssd(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd where(Condition condition) {
        return new Ssd(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ssd where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ssd where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ssd where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Ssd where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Ssd whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
