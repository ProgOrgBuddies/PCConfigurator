/*
 * This file is generated by jOOQ.
 */
package de.htwsaar.pcconfig.generated.tables;


import de.htwsaar.pcconfig.generated.DefaultSchema;
import de.htwsaar.pcconfig.generated.Keys;
import de.htwsaar.pcconfig.generated.tables.records.CaseRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Case extends TableImpl<CaseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Case</code>
     */
    public static final Case CASE = new Case();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CaseRecord> getRecordType() {
        return CaseRecord.class;
    }

    /**
     * The column <code>Case.Case_ID</code>.
     */
    public final TableField<CaseRecord, Integer> CASE_ID = createField(DSL.name("Case_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Case.Name</code>.
     */
    public final TableField<CaseRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Case.Typ</code>.
     */
    public final TableField<CaseRecord, String> TYP = createField(DSL.name("Typ"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Case.Preis</code>.
     */
    public final TableField<CaseRecord, Float> PREIS = createField(DSL.name("Preis"), SQLDataType.REAL.nullable(false), this, "");

    private Case(Name alias, Table<CaseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Case(Name alias, Table<CaseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Case</code> table reference
     */
    public Case(String alias) {
        this(DSL.name(alias), CASE);
    }

    /**
     * Create an aliased <code>Case</code> table reference
     */
    public Case(Name alias) {
        this(alias, CASE);
    }

    /**
     * Create a <code>Case</code> table reference
     */
    public Case() {
        this(DSL.name("Case"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<CaseRecord> getPrimaryKey() {
        return Keys.CASE__PK_CASE;
    }

    @Override
    public Case as(String alias) {
        return new Case(DSL.name(alias), this);
    }

    @Override
    public Case as(Name alias) {
        return new Case(alias, this);
    }

    @Override
    public Case as(Table<?> alias) {
        return new Case(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Case rename(String name) {
        return new Case(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Case rename(Name name) {
        return new Case(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Case rename(Table<?> name) {
        return new Case(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case where(Condition condition) {
        return new Case(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Case where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Case where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Case where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Case where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Case whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
