/*
 * This file is generated by jOOQ.
 */
package de.htwsaar.pcconfig.generated.tables;


import de.htwsaar.pcconfig.generated.DefaultSchema;
import de.htwsaar.pcconfig.generated.Keys;
import de.htwsaar.pcconfig.generated.tables.records.NetzteilRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Netzteil extends TableImpl<NetzteilRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Netzteil</code>
     */
    public static final Netzteil NETZTEIL = new Netzteil();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NetzteilRecord> getRecordType() {
        return NetzteilRecord.class;
    }

    /**
     * The column <code>Netzteil.PSU_ID</code>.
     */
    public final TableField<NetzteilRecord, Integer> PSU_ID = createField(DSL.name("PSU_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Netzteil.Name</code>.
     */
    public final TableField<NetzteilRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Netzteil.Marke</code>.
     */
    public final TableField<NetzteilRecord, String> MARKE = createField(DSL.name("Marke"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Netzteil.Watt</code>.
     */
    public final TableField<NetzteilRecord, Integer> WATT = createField(DSL.name("Watt"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Netzteil.Preis</code>.
     */
    public final TableField<NetzteilRecord, Float> PREIS = createField(DSL.name("Preis"), SQLDataType.REAL.nullable(false), this, "");

    private Netzteil(Name alias, Table<NetzteilRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Netzteil(Name alias, Table<NetzteilRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Netzteil</code> table reference
     */
    public Netzteil(String alias) {
        this(DSL.name(alias), NETZTEIL);
    }

    /**
     * Create an aliased <code>Netzteil</code> table reference
     */
    public Netzteil(Name alias) {
        this(alias, NETZTEIL);
    }

    /**
     * Create a <code>Netzteil</code> table reference
     */
    public Netzteil() {
        this(DSL.name("Netzteil"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<NetzteilRecord> getPrimaryKey() {
        return Keys.NETZTEIL__PK_NETZTEIL;
    }

    @Override
    public Netzteil as(String alias) {
        return new Netzteil(DSL.name(alias), this);
    }

    @Override
    public Netzteil as(Name alias) {
        return new Netzteil(alias, this);
    }

    @Override
    public Netzteil as(Table<?> alias) {
        return new Netzteil(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Netzteil rename(String name) {
        return new Netzteil(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Netzteil rename(Name name) {
        return new Netzteil(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Netzteil rename(Table<?> name) {
        return new Netzteil(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil where(Condition condition) {
        return new Netzteil(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Netzteil where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Netzteil where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Netzteil where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Netzteil where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Netzteil whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
